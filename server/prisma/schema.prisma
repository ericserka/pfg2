// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE_CIS
  FEMALE_CIS
  MALE_TRANS
  FEMALE_TRANS
  NON_BINARY
  FLUID
  OTHER
  PREFER_NOT_TO_INFORM
}

enum SexualOrientation {
  HETEROSEXUAL
  BISEXUAL
  ASEXUAL
  HOMOSEXUAL
  OTHER
  PREFER_NOT_TO_INFORM
}

enum Ethnicity {
  WHITE_COLOR
  BLACK_COLOR
  YELLOW_COLOR
  INDIGENOUS_ETHNICITY
  OTHER
  PREFER_NOT_TO_INFORM
}

enum NotificationType {
  INVITE
  HELP
  MESSAGE
  GROUP_REMOVED
}

enum NotificationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                         Int               @id @default(autoincrement())
  email                      String            @unique
  name                       String
  username                   String            @unique
  phoneNumber                String            @unique
  birthday                   String
  gender                     Gender
  sexualOrientation          SexualOrientation
  ethnicity                  Ethnicity
  password                   String
  profilePic                 String            @db.LongText
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  groups                     Group[]           @relation("groupMembers")
  messages                   Message[]
  sentNotifications          Notification[]    @relation("sender")
  receivedNotifications      Notification[]    @relation("receiver")
  groupsThatOwn              Group[]           @relation("owner")
  lastKnownLatitude          Float?
  lastKnownLongitude         Float?
  lastKnownLocationUpdatedAt DateTime?
  defaultGroup               Group?            @relation("defaultGroup", fields: [defaultGroupId], references: [id])
  defaultGroupId             Int?
  pushToken                  String?
  pushNotificationAllowed    Boolean           @default(false)
  groupsThatLocationIsShared Group[]           @relation("groupLocationShared")
}

model Group {
  id                        Int            @id @default(autoincrement())
  name                      String
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  members                   User[]         @relation("groupMembers")
  messages                  Message[]
  notifications             Notification[]
  usersThatIsDefault        User[]         @relation("defaultGroup")
  owner                     User           @relation("owner", fields: [ownerId], references: [id])
  ownerId                   Int
  usersThatLocationIsShared User[]         @relation("groupLocationShared")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int?
}

model Notification {
  id         Int                 @id @default(autoincrement())
  content    String              @db.LongText
  type       NotificationType
  status     NotificationStatus?
  seen       Boolean             @default(false)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  sender     User?               @relation("sender", fields: [senderId], references: [id])
  senderId   Int?
  receiver   User                @relation("receiver", fields: [receiverId], references: [id])
  receiverId Int
  group      Group?              @relation(fields: [groupId], references: [id])
  groupId    Int?
}

model EmergencyLocations {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude  Float
  longitude Float
}